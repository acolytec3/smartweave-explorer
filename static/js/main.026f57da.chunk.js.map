{"version":3,"sources":["context/walletContext.ts","providers/wallets.ts","components/Smartweave.tsx","components/WalletLoader.tsx","reducers/walletReducer.ts","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["initWalletState","key","balance","address","tokens","tokenAddresses","wallets","WalletContext","createContext","state","dispatch","getArweaveInstance","Arweave","init","host","port","addWallet","wallet","a","arweave","jwkToAddress","ar","getBalance","winstonToAr","getTxnData","txId","query","api","post","res","console","log","contractSrcTxn","data","transactions","edges","node","tags","filter","tag","name","value","getData","decode","string","contractSource","getContractState","contractId","getContract","testFunction","method","params","types","param","newParams","parseInt","parseFloat","interactWriteDryRun","function","type","runFunction","methodType","interactWrite","interactRead","acorn","require","SmartweaveExplorer","React","useState","setSource","setID","writeMethods","setWriteMethods","readMethods","setReadMethods","contractState","setContractState","getSource","parse","ecmaVersion","sourceType","src","body","declaration","id","allMethods","test","left","object","methods","getInputMethods","forEach","returnStatement","consequent","length","argument","properties","paramNames","declarations","map","property","right","push","err","placeholder","onChange","evt","target","onClick","size","w","overflow","height","readOnly","fontSize","isReadOnly","defaultValue","align","JSON","stringify","FunctionCall","values","setValue","setType","useContext","toast","useToast","txnStatus","setStatus","useDisclosure","isOpen","onToggle","submitTransaction","close","title","status","duration","position","allowToggle","index","vals","newTypes","toString","direction","then","in","WalletLoader","loading","setLoading","setAddress","copiedValue","setCopiedValue","onCopy","useClipboard","onDrop","acceptedFiles","reader","FileReader","onabort","onerror","onload","event","walletObject","result","walletDeets","payload","mnemonic","description","readAsText","loadWalletFromMnemonic","getKeyFromMnemonic","generateWallet","generateMnemonic","createWalletFile","blob","Blob","URL","createObjectURL","href","link","document","createElement","download","appendChild","click","removeChild","switchWallet","isLoaded","borderStyle","borderWidth","mb","getRootProps","getInputProps","flexDirection","padding","textAlign","isDisabled","mt","isInline","whiteSpace","maxWidth","textOverflow","cursor","justifyContent","justify","as","alignContent","walletReducer","action","existingWallets","picture","blockHeight","newWallet","find","App","useReducer","Provider","isFitted","variant","Smartweave","bottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","theme","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.026f57da.chunk.js","sourcesContent":["import { createContext } from 'react'\n\nexport type token = {\n    ticker: string,\n    contract: string,\n    contractState: any\n}\n\nexport type wallet = {\n    address: string,\n    key?: any,\n    mnemonic?: string\n}\nexport type walletState = {\n    key : any,\n    mnemonic?: string\n    balance: string,\n    address: string,\n    tokens: token[],\n    wallets: wallet[],\n    picture?: string,\n    blockHeight?: number,\n    tokenAddresses?: string[]\n}\n\nexport const initWalletState: walletState = {\n        key: null as any,\n        balance: '',\n        address: '',\n        tokens: [],\n        tokenAddresses: [],\n        wallets: []\n}\n\nconst WalletContext = createContext<{state:walletState, dispatch: React.Dispatch<any>}>({state: initWalletState, dispatch: () => null} )\n\nexport { WalletContext as default }","import Arweave from 'arweave'\nimport axios from 'axios'\nimport { interactWriteDryRun, interactWrite, interactRead, } from 'smartweave'\nimport { getContract } from 'cacheweave'\nimport { token } from '../context/walletContext'\nimport { JWKInterface } from 'arweave/node/lib/wallet'\n\nexport const getArweaveInstance = () => {\n  return Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n}\n\nexport const getBlockHeight = async (): Promise<number> => {\n  let arweave = await getArweaveInstance()\n  let res = await arweave.network.getInfo()\n  return res.height\n}\n\nexport const addWallet = async (wallet: any): Promise<{ address: string, balance: string }> => {\n  let arweave = getArweaveInstance()\n  let address = ''\n  if (typeof wallet === \"string\") address = wallet;\n  else address = await arweave.wallets.jwkToAddress(wallet)\n  let balance = arweave.ar.winstonToAr(await arweave.wallets.getBalance(address))\n  return { address, balance }\n}\n\nexport const getToken = async (contractID: string): Promise<token> => {\n  let arweave = getArweaveInstance()\n  let token = await getContract(arweave, contractID);\n  //@ts-ignore\n  return { ticker: token.ticker, contract: contractID, contractState: token }\n}\n\nexport interface gQLParams {\n  address?: string,\n  name?: string,\n  value?: string,\n  to?: string,\n  cursor?: string\n}\n\nexport const getTxns = async ({ address = undefined, name = undefined, value = undefined, to = undefined, cursor = undefined }: gQLParams): Promise<any> => {\n  let searchQuery = `first: 10 \n    ${address ? 'owners:[\"' + address + '\"]' : ''}\n    ${cursor ? 'after:\"' + cursor + '\"' : ''} \n    ${name ? 'tags:{name:\"' + name + '\",values:[\"' + value + '\"]}' : ''}\n    ${to ? 'recipients:  [\"' + to + '\"]' : ''}`\n  return axios.post('https://arweave.net/graphql', {\n    query: `query {\n                transactions(${searchQuery}\n                 ) {\n                  edges {\n                    cursor\n                    node {\n                      id\n                      recipient\n                      tags {\n                        name\n                        value\n                      }\n                      fee {\n                        winston\n                        ar\n                      }\n                      quantity {\n                        winston\n                        ar\n                      }\n                      owner {\n                        address\n                      }\n                    }\n                  }\n                }\n              }`\n  })\n    .then((res) => {\n      return res.data.data.transactions.edges\n    })\n    .catch((err) => {\n      console.log(err)\n      return []\n    })\n}\n\n\nexport const getFee = async (size: number): Promise<string> => {\n  let res = await axios.get(`https://arweave.net:443/price/${size}`)\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n  return arweave.ar.winstonToAr(res.data)\n}\n\nexport const sendTransfer = async (transfer: any, key: any): Promise<string> => {\n  try {\n    let arweave = Arweave.init({\n      host: 'arweave.net',\n      port: 443,\n    })\n    let transaction = await arweave.createTransaction({\n      target: transfer.to,\n      quantity: arweave.ar.arToWinston(transfer.amount)\n    }, key);\n\n    transaction.addTag('App-Name', 'ArMob 2.0')\n    await arweave.transactions.sign(transaction, key);\n\n    const response = await arweave.transactions.post(transaction);\n    console.log(response);\n  }\n  catch (err) {\n    console.log(`Error sending tranfer - ${err}`)\n    return `Error submitting transaction - ${err}`\n  }\n  return 'Transaction submitted successfully'\n}\n\nexport const sendTokens = async (contract: string, amount: number, target: string, key: any): Promise<string | boolean> => {\n  try {\n    let arweave = getArweaveInstance()\n    let res = await interactWriteDryRun(arweave, key, contract, {\n      target: target,\n      qty: amount,\n      function: 'transfer'\n    })\n    console.log('Dry-run result is:', res)\n    if (res.type === 'ok') {\n      const tx = await arweave.createTransaction(\n        {\n          target: target,\n          data: Math.random().toString().slice(-4),\n        },\n        key\n      );\n      let tags = {\n        'Contract': contract,\n        'App-Name': 'SmartWeaveAction',\n        'App-Version': '0.3.0',\n        'Input': JSON.stringify({\n          function: 'transfer',\n          target: target,\n          qty: amount\n        })\n      }\n\n      for (const [key, value] of Object.entries(tags)) {\n        tx.addTag(key, value.toString());\n      }\n      tx.addTag('App-Name', 'ArMob 2.0')\n      await arweave.transactions.sign(tx, key);\n\n      console.log(tx.id)\n      let status = await arweave.transactions.post(tx)\n      console.log(status.statusText)\n\n      return \"success!\"\n    }\n  }\n  catch (err) {\n    console.log(err)\n    return (err.toString())\n  }\n  return ''\n}\n\nexport const uploadFile = async (data: File, key: JWKInterface, tags: { name: string; value: string; }[]) => {\n  try {\n    let arweave = getArweaveInstance()\n    let buffer = await data.arrayBuffer()\n    let transaction = await arweave.createTransaction({ data: buffer }, key)\n    tags.forEach((tag) => transaction.addTag(tag.name, tag.value))\n    await arweave.transactions.sign(transaction, key)\n    const response = await arweave.transactions.post(transaction);\n    console.log(response);\n  }\n  catch (err) {\n    console.log(`Error sending tranfer - ${err}`)\n    return `Error submitting transaction - ${err}`\n  }\n  return 'Transaction submitted successfully'\n}\n\nexport const updateTokens = async (tokens: token[], address: string): Promise<token[] | false> => {\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n\n  try {\n    let tokenBalances = await Promise.all(tokens.map((token: token) =>\n      getContract(arweave, token.contract).then(contractState => {\n        console.log(contractState)\n        //@ts-ignore\n        if (contractState.balances)\n        //@ts-ignore\n          return { 'ticker': contractState.ticker as string, 'contract': token.contract, contractState: contractState }\n        else return { 'ticker': '', 'contract': token.contract, contractState: contractState }\n      })))\n    return tokenBalances\n  }\n  catch (err) {\n    console.log('Error updating tokens', err)\n    return false\n  }\n}\n\nexport const timeLeft = (currentBlock: number, endBlock: number): string => {\n  let timeLeft = (endBlock - currentBlock) / 720\n  if (timeLeft > 1) return `${Math.floor(timeLeft)} more days`\n  else if (timeLeft > 0.041) return `${Math.floor(timeLeft * 24)} more hours`\n  else return 'less than 1 hour'\n}\n\nexport const getAllCommunityIds = async (): Promise<string[]> => {\n  let cursor = '';\n  let hasNextPage = true;\n\n  let client = getArweaveInstance()\n\n  const ids: string[] = [];\n  while (hasNextPage) {\n    const query = {\n      query: `\n              query {\n                  transactions(\n                      tags: [\n                          { name: \"App-Name\", values: [\"SmartWeaveContract\"] }\n                          {\n                              name: \"Contract-Src\"\n                              values: [\"ngMml4jmlxu0umpiQCsHgPX2pb_Yz6YDB8f7G6j-tpI\"]\n                          }\n                      ]\n                      after: \"${cursor}\"\n                      first: 100\n                  ) {\n                      pageInfo {\n                          hasNextPage\n                      }\n                      edges {\n                          cursor\n                          node {\n                              id\n                          }\n                      }\n                  }\n              }            \n          `,\n    };\n    const res = await client.api.post('/graphql', query);\n    const data = res.data;\n\n    for (let i = 0, j = data.data.transactions.edges.length; i < j; i++) {\n      ids.push(data.data.transactions.edges[i].node.id);\n    }\n    hasNextPage = data.data.transactions.pageInfo.hasNextPage;\n\n    if (hasNextPage) {\n      cursor = data.data.transactions.edges[data.data.transactions.edges.length - 1].cursor;\n    }\n  }\n\n  return ids;\n}\n\nexport const getTxnData = async (txId: string): Promise<string> => {\n  let arweave = getArweaveInstance()\n  let query = {\n    query: `\n  query {\n    transactions(ids: [\"${txId}\"]) {\n        edges {\n            node {\n                id\n              \ttags {\n                  name\n                  value\n                }\n            }\n        }\n    }\n}`}\n  let res = await arweave.api.post('/graphql', query)\n  console.log(res)\n  let contractSrcTxn = res.data.data.transactions.edges[0].node.tags.filter((tag: any) => tag.name === 'Contract-Src')[0].value\n  console.log(contractSrcTxn)\n  let contractSource = await arweave.transactions.getData(contractSrcTxn, { decode: true, string: true }) as string\n  return contractSource;\n}\n\nexport const getContractState = async (contractId: string): Promise<any> => {\n  let arweave = getArweaveInstance()\n  return await getContract(arweave, contractId)\n}\n\nexport const testFunction = async (method: string, contractId: string, params: any, key: JWKInterface, types: any): Promise<string> => {\n  let arweave = getArweaveInstance()\n  console.log('params are')\n  console.log(params)\n  console.log('types are')\n  console.log(types)\n  let newParams = { ...params }\n  for (let param in newParams) {\n    if (types[param] === \"integer\") {\n      newParams[param] = parseInt(params[param])\n    }\n    else if (types[param] === \"float\") {\n      newParams[param] = parseFloat(params[param])\n    }\n  }\n  let res = await interactWriteDryRun(arweave, key, contractId, {\n    ...newParams,\n    function: method\n  })\n  console.log(res)\n  return res.type\n}\n\nexport const runFunction = async (method: string, contractId: string, params: any, key: JWKInterface, types: any, methodType: string): Promise<any> => {\n  let arweave = getArweaveInstance()\n  console.log('params are')\n  console.log(params)\n  console.log('types are')\n  console.log(types)\n  let newParams = { ...params }\n  for (let param in newParams) {\n    if (types[param] === \"integer\") {\n      newParams[param] = parseInt(params[param])\n    }\n    else if (types[param] === \"float\") {\n      newParams[param] = parseFloat(params[param])\n    }\n  }\n  let res: string | false\n  if (methodType === 'write') {\n    res = await interactWrite(arweave, key, contractId, {\n      ...newParams,\n      function: method\n    })\n  }\n  else res = (await interactRead(arweave, key, contractId, {\n    ...newParams,\n    function: method\n  }))\n  console.log(res)\n  return res\n}\n\n","import {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Button,\n  Code,\n  Collapse,\n  Heading,\n  HStack,\n  Input,\n  List,\n  ListItem,\n  Radio,\n  RadioGroup,\n  Spinner,\n  Text,\n  Textarea,\n  useDisclosure,\n  useToast,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport WalletContext from \"../context/walletContext\";\nimport {\n  getContractState,\n  getTxnData,\n  runFunction,\n  testFunction,\n} from \"../providers/wallets\";\nconst acorn = require(\"acorn\");\n\ninterface FunctionCallProps {\n  name: string;\n  params: string[];\n  methodType: string;\n  contractId: string;\n}\n\nconst SmartweaveExplorer = () => {\n  const [contractSource, setSource] = React.useState(\"\");\n  const [contractId, setID] = React.useState(\"\");\n  const [writeMethods, setWriteMethods] = React.useState(\n    [] as FunctionCallProps[]\n  );\n  const [readMethods, setReadMethods] = React.useState(\n    [] as FunctionCallProps[]\n  );\n  const [contractState, setContractState] = React.useState({} as any);\n\n  const getSource = async () => {\n    let res = await getTxnData(contractId);\n    setSource(res);\n    if (res) {\n      setSource(res);\n      let src = await acorn.parse(res, {\n        ecmaVersion: \"latest\",\n        sourceType: \"module\",\n      });\n      if (src.body[0].declaration.id.name === \"handle\") {\n        let allMethods = src.body[0].declaration.body.body.filter(\n          (node: any) =>\n            node.type === \"IfStatement\" &&\n            node.test.left.object.name === \"input\"\n        );\n        let methods = getInputMethods(allMethods);\n        setWriteMethods(methods.writeMethods.filter((method) => method.name));\n        setReadMethods(methods.readMethods.filter((method) => method.name));\n        console.log(methods);\n      }\n      res = await getContractState(contractId);\n      console.log(res);\n      setContractState(res);\n    }\n  };\n\n  const getInputMethods = (\n    src: any[]\n  ): {\n    readMethods: FunctionCallProps[];\n    writeMethods: FunctionCallProps[];\n  } => {\n    let readMethods: FunctionCallProps[] = [];\n    let writeMethods: FunctionCallProps[] = [];\n    src.forEach((node) => {\n      if (\n        node.test.type === \"BinaryExpression\" &&\n        node.test.left.object &&\n        node.test.left.object.name === \"input\"\n      ) {\n        try {\n          console.log(node);\n          let returnStatement =\n            node.consequent.body[node.consequent.body.length - 1]; //Get write methods\n          if (\n            returnStatement.type === \"ReturnStatement\" &&\n            returnStatement.argument.properties[0].key.name === \"state\"\n          ) {\n            let params = node.consequent.body.filter(\n              (param: any) =>\n                param.type === \"VariableDeclaration\" &&\n                param.declarations[0].init.object &&\n                param.declarations[0].init.object.name === \"input\"\n            );\n            let paramNames = params.map(\n              (param: any) => param.declarations[0].init.property.name\n            );\n            let name = node.test.right.value;\n            writeMethods.push({\n              name: name,\n              params: paramNames,\n              methodType: \"write\",\n              contractId: contractId,\n            });\n          } else {\n            //Get read methods\n            let params = node.consequent.body.filter(\n              (param: any) =>\n                param.type === \"VariableDeclaration\" &&\n                ((param.declarations[0].init.left &&\n                  param.declarations[0].init.left.object &&\n                  param.declarations[0].init.left.object.name === \"input\") ||\n                  (param.declarations[0].init.object &&\n                    param.declarations[0].init.object.name === \"input\"))\n            );\n            let paramNames = params.map(\n              (param: any) => param.declarations[0].init.left.property.name\n            );\n            let name = node.test.right.value;\n            readMethods.push({\n              name: name,\n              params: paramNames,\n              methodType: \"read\",\n              contractId: contractId,\n            });\n          }\n        } catch (err) {\n          console.log(err);\n        }\n      }\n    });\n    return { readMethods, writeMethods };\n  };\n\n  return (\n    <VStack>\n      <Input\n        placeholder=\"Smartweave Contract ID\"\n        value={contractId}\n        onChange={(evt) => setID(evt.target.value)}\n      />\n      <Button onClick={getSource}>Load Contract</Button>\n      <Heading size=\"xs\">Contract Source</Heading>\n      <Code w=\"100%\">\n        <Textarea\n          overflow=\"scroll\"\n          height=\"200px\"\n          readOnly={true}\n          fontSize=\"xs\"\n          isReadOnly\n          defaultValue={contractSource}\n        />\n      </Code>\n      <Heading size=\"xs\">Contract State</Heading>\n      <Code\n        w=\"100%\"\n        overflow=\"scroll\"\n        height=\"200px\"\n        fontSize=\"xs\"\n        align=\"start\"\n      >\n        {JSON.stringify(contractState, null, 2)}\n      </Code>\n      <Heading size=\"xs\">Write Methods</Heading>\n      <List>\n        {writeMethods &&\n          writeMethods.map((method: FunctionCallProps) => (\n            <ListItem>\n              <FunctionCall\n                name={method.name}\n                params={method.params}\n                methodType={method.methodType}\n                contractId={contractId}\n              />\n            </ListItem>\n          ))}\n      </List>\n      <Heading size=\"xs\">Read Methods</Heading>\n      <List>\n        {readMethods &&\n          readMethods.map((method: FunctionCallProps) => (\n            <ListItem>\n              <FunctionCall\n                name={method.name}\n                params={method.params}\n                methodType={method.methodType}\n                contractId={contractId}\n              />\n            </ListItem>\n          ))}\n      </List>\n    </VStack>\n  );\n};\n\nexport default SmartweaveExplorer;\n\nconst FunctionCall: React.FC<FunctionCallProps> = ({\n  name,\n  params,\n  methodType,\n  contractId,\n}) => {\n  const [values, setValue] = React.useState({} as any);\n  const [types, setType] = React.useState({} as any);\n  const { state } = React.useContext(WalletContext);\n  const toast = useToast();\n  const [txnStatus, setStatus] = React.useState() as any;\n  const { isOpen, onToggle } = useDisclosure();\n\n  const submitTransaction = async (close: () => void) => {\n    let res = await runFunction(\n      name,\n      contractId,\n      values,\n      state.key,\n      types,\n      methodType\n    );\n    if (res)\n      toast({\n        title: \"Successfully submitted transaction!\",\n        status: \"success\",\n        duration: 3000,\n        position: \"bottom\",\n      });\n    else\n      toast({\n        title: \"Error submitting transaction\",\n        status: \"error\",\n        duration: 3000,\n        position: \"bottom\",\n      });\n    close();\n    setStatus();\n  };\n\n  return (\n    <Accordion allowToggle>\n      <AccordionItem key={name}>\n        <AccordionButton>\n          <Text>{name}</Text>\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          {params.map((param, index) => {\n            return (\n              <Box>\n                <Input\n                  key={name + param}\n                  placeholder={param}\n                  value={values[index]}\n                  onChange={(evt) => {\n                    let vals = { ...values };\n                    vals[param] = evt.target.value;\n                    setValue(vals);\n                  }}\n                />\n                <RadioGroup\n                  name=\"param-type\"\n                  onChange={(evt) => {\n                    let newTypes = { ...types };\n                    newTypes[param] = evt.toString();\n                    setType(newTypes);\n                  }}\n                  value={types[param]}\n                  direction=\"horizontal\"\n                >\n                  <Radio value=\"string\">String</Radio>\n                  <Radio value=\"integer\">Integer</Radio>\n                  <Radio value=\"float\">Float</Radio>\n                </RadioGroup>\n              </Box>\n            );\n          })}\n          {methodType === \"write\" ? (\n            <>\n              {!isOpen && !txnStatus && (\n                <Button\n                  onClick={() => {\n                    onToggle();\n                    testFunction(\n                      name,\n                      contractId,\n                      values,\n                      state.key,\n                      types\n                    ).then((res) => setStatus(res));\n                  }}\n                >\n                  Test Contract Method Call\n                </Button>\n              )}\n            </>\n          ) : (\n            <>\n              {!isOpen ? (\n                <Button\n                  onClick={() => {\n                    onToggle();\n                    runFunction(\n                      name,\n                      contractId,\n                      values,\n                      state.key,\n                      types,\n                      methodType\n                    ).then((res) => setStatus(res));\n                  }}\n                >\n                  Read Contract\n                </Button>\n              ) : (\n                <Button\n                  onClick={() => {\n                    onToggle();\n                    setStatus();\n                  }}\n                >\n                  Start Over\n                </Button>\n              )}\n            </>\n          )}\n          <Collapse in={isOpen}>\n            {methodType === \"write\" ? (\n              <VStack>\n                {txnStatus ? (\n                  <Text>Transaction status is {txnStatus}</Text>\n                ) : (\n                  <Spinner />\n                )}\n                <HStack>\n                  <Button onClick={() => submitTransaction(onToggle)}>\n                    Live dangerously!\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      onToggle();\n                      setStatus();\n                    }}\n                  >\n                    Start Over\n                  </Button>\n                </HStack>\n              </VStack>\n            ) : (\n              <Code>\n                <Text>Method Result</Text>\n                {txnStatus ? (\n                  <Textarea\n                    isReadOnly\n                    overflow=\"scroll\"\n                    height=\"200px\"\n                    readOnly={true}\n                    fontSize=\"xs\"\n                    defaultValue={JSON.stringify(txnStatus, null, 2)}\n                  />\n                ) : (\n                  <Spinner />\n                )}\n              </Code>\n            )}\n          </Collapse>\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n};\n","import {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  Heading,\n  Input,\n  Popover,\n  PopoverArrow,\n  PopoverBody,\n  PopoverContent,\n  PopoverTrigger,\n  Skeleton,\n  Stack,\n  Text,\n  useClipboard,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { generateMnemonic, getKeyFromMnemonic } from \"arweave-mnemonic-keys\";\nimport React from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport { FaCheck, FaGripHorizontal, FaKey, FaTrash } from \"react-icons/fa\";\nimport WalletContext, { wallet } from \"../context/walletContext\";\nimport { addWallet } from \"../providers/wallets\";\n\nconst WalletLoader = () => {\n  const toast = useToast();\n  const { state, dispatch } = React.useContext(WalletContext);\n  const [loading, setLoading] = React.useState(false);\n  const [address, setAddress] = React.useState(\"\");\n  const [copiedValue, setCopiedValue] = React.useState<string>(\"\");\n  const { onCopy } = useClipboard(copiedValue);\n\n  const onDrop = async (acceptedFiles: any) => {\n    const reader = new FileReader();\n    reader.onabort = () => console.log(\"file reading was aborted\");\n    reader.onerror = () => console.log(\"file reading has failed\");\n    reader.onload = async function (event) {\n      setLoading(true);\n      if (acceptedFiles[0].type === \"application/json\") {\n        try {\n          let walletObject = JSON.parse(event!.target!.result as string);\n          let walletDeets = await addWallet(walletObject);\n\n          dispatch({\n            type: \"ADD_WALLET\",\n            payload: { ...walletDeets, key: walletObject, mnemonic: walletObject.mnemonic },\n          });\n\n        } catch (err) {\n          console.log(\"Invalid json in wallet file\");\n          toast({\n            title: \"Error loading wallet\",\n            status: \"error\",\n            duration: 3000,\n            position: \"bottom-left\",\n            description: \"Invalid JSON in wallet file\",\n          });\n        }\n      } else {\n        console.log(\"Invalid file type\");\n        toast({\n          title: \"Error loading wallet\",\n          status: \"error\",\n          duration: 3000,\n          position: \"bottom-left\",\n          description: \"Invalid file type\",\n        });\n      }\n      setLoading(false);\n    };\n    try {\n      reader.readAsText(acceptedFiles[0]);\n    } catch (err) {\n      console.log(\"Invalid file type\");\n      toast({\n        title: \"Error loading wallet\",\n        status: \"error\",\n        duration: 3000,\n        position: \"bottom-left\",\n        description: \"Invalid file type\",\n      });\n    }\n  };\n\n  const loadWalletFromMnemonic = async (mnemonic: string) => {\n    setLoading(true);\n    let walletObject = await getKeyFromMnemonic(mnemonic);\n    let walletDeets = await addWallet(walletObject);\n\n    setLoading(false);\n    dispatch({\n      type: \"ADD_WALLET\",\n      payload: { ...walletDeets, key: walletObject, mnemonic: mnemonic },\n    });\n\n  };\n\n  const generateWallet = async () => {\n    setLoading(true);\n    let mnemonic = await generateMnemonic();\n    setAddress(mnemonic);\n    loadWalletFromMnemonic(mnemonic);\n  };\n\n\n  const createWalletFile = async (wallet: wallet) => {\n    const blob = new Blob([JSON.stringify({...wallet.key, mnemonic: wallet.mnemonic}, null, 2)], {\n      type: \"application/json\",\n    });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = href;\n    link.download = `arweave-keyfile-${wallet.address}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const switchWallet = async (address: string) => {\n    let wallet = await addWallet(address);\n    dispatch({\n      type: \"CHANGE_ACTIVE_WALLET\",\n      payload: { address: wallet.address, balance: wallet.balance },\n    });\n  };\n\n  return (\n    <Stack align=\"center\">\n      <Skeleton isLoaded={!loading}>\n        <Box w=\"100%\" borderStyle=\"dashed\" borderWidth=\"2px\" mb={2}>\n          <Dropzone onDrop={onDrop}>\n            {({ getRootProps, getInputProps }) => (\n              <section>\n                <div {...getRootProps()}>\n                  <input {...getInputProps()} />\n                  <Box flexDirection=\"row\" padding={3}>\n                    <Text fontSize={14} textAlign=\"center\">\n                      Drop a wallet file or click to load wallet\n                    </Text>\n                  </Box>\n                </div>\n              </section>\n            )}\n          </Dropzone>\n        </Box>\n        <Stack w=\"100%\" mb={2}>\n          <Heading size=\"xs\">Wallet mnemonic</Heading>\n          <Input\n            w=\"93%%\"\n            placeholder=\"Enter 12 word seedphrase\"\n            onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n              setAddress(evt.target.value);\n            }}\n          />\n          <Button\n            isDisabled={address === \"\"}\n            onClick={() => loadWalletFromMnemonic(address)}\n          >\n            Load Wallet\n          </Button>\n        </Stack>\n        <Stack w=\"100%\">\n          <Button mt={2} onClick={generateWallet}>\n            Generate New Wallet\n          </Button>\n        </Stack>\n      </Skeleton>\n      {state.address && (\n        <>\n          <Divider />\n          <Heading size=\"sm\">Loaded Wallets</Heading>\n        </>\n      )}\n      {state.wallets.length > 0 &&\n        state.wallets.map((wallet) => {\n          console.log(wallet);\n          return (\n            <Stack isInline align=\"start\">\n              <Popover>\n                <PopoverTrigger>\n                  <Text\n                    whiteSpace=\"nowrap\"\n                    overflow=\"hidden\"\n                    maxWidth=\"90vw\"\n                    textOverflow=\"ellipsis\"\n                    cursor=\"pointer\"\n                  >\n                    {wallet.address}\n                  </Text>\n                </PopoverTrigger>\n                <PopoverContent>\n                  <PopoverArrow />\n                  <PopoverBody>\n                    <Stack isInline justifyContent=\"space-around\">\n                      <Flex\n                        direction=\"column\"\n                        align=\"center\"\n                        justify=\"center\"\n                        key={wallet.address + \"pseudo2\"}\n                        as=\"button\"\n                        onClick={() => {\n                          switchWallet(wallet.address);\n                        }}\n                        alignContent=\"start\"\n                      >\n                        <FaCheck size={16} />\n                        <Text>Use</Text>\n                      </Flex>\n                      <Flex\n                        as=\"button\"\n                        direction=\"column\"\n                        align=\"center\"\n                        justify=\"center\"\n                        onClick={() => {\n                          dispatch({\n                            type: \"REMOVE_WALLET\",\n                            payload: { address: wallet.address },\n                          });\n                        }}\n                      >\n                        <FaTrash size={16} />\n                        <Text>Remove</Text>\n                      </Flex>\n                      <Flex\n                        as=\"button\"\n                        direction=\"column\"\n                        align=\"center\"\n                        justify=\"center\"\n                        onClick={() => createWalletFile(wallet)}\n                      >\n                        <FaKey size={16} />\n                        <Text>Download Keyfile</Text>\n                      </Flex>\n                      {wallet.mnemonic && (\n                        <Flex\n                          as=\"button\"\n                          direction=\"column\"\n                          align=\"center\"\n                          justify=\"center\"\n                          onClick={() => {\n                            if (wallet.mnemonic)\n                              setCopiedValue(wallet.mnemonic);\n                            onCopy();\n                          }}\n                        >\n                          <FaGripHorizontal size={16} />\n                          <Text>Copy Seedphrase</Text>\n                        </Flex>\n                      )}\n                    </Stack>\n                  </PopoverBody>\n                </PopoverContent>\n              </Popover>\n            </Stack>\n          );\n        })}\n    </Stack>\n  );\n};\n\nexport default WalletLoader;\n","import { walletState, wallet } from '../context/walletContext';\n\nconst walletReducer = (state: walletState, action: { type: string, payload: any }): walletState => {\n    console.log('Current state is:')\n    console.log(state)\n    console.log('Action requested is:')\n    console.log(action)\n    switch (action.type) {\n        case 'LOAD_STATE': {\n            return { ...action.payload.state }\n        }\n        case 'ADD_WALLET': {\n            let existingWallets = state.wallets?.filter((wallet: wallet)=> wallet.address === action.payload.address)\n            let wallets = state.wallets ? state.wallets : []\n            if (existingWallets && existingWallets.length === 0)\n                wallets?.push({address:action.payload.address, key:action.payload.key, mnemonic: action.payload.mnemonic})\n            return {\n            ...state,\n            key: action.payload.key,\n            balance: action.payload.balance,\n            address: action.payload.address,\n            mnemonic: action.payload.mnemonic,\n            wallets: wallets\n        }}\n        case 'UPDATE_TOKENS': {\n            return {\n                ...state,\n                tokens: action.payload.tokens\n            }\n        }\n        case 'SET_PICTURE': {\n            return {\n                ...state,\n                picture: action.payload.picture\n            }\n        }\n        case 'SET_BLOCK_HEIGHT': {\n            return {\n                ...state,\n                blockHeight: action.payload.blockHeight\n            }\n        }\n        case 'SET_TOKEN_ADDRESSES': {\n            return {\n                ...state,\n                tokenAddresses: action.payload.tokenAddresses\n            }\n        }\n        case 'CHANGE_ACTIVE_WALLET': {\n            let newWallet = state.wallets.find((wallet) => wallet.address === action.payload.address)\n            return {\n                ...state,\n                address: action.payload.address,\n                key: newWallet?.key,\n                balance: action.payload.balance,\n                mnemonic: newWallet?.mnemonic\n            }\n        }\n        case 'REMOVE_WALLET': {\n            let wallets = state.wallets.filter((wallet) => wallet.address !== action.payload.address)\n            if (wallets.length > 0)\n            return {\n                ...state,\n                wallets: wallets,\n                address: wallets[0]?.address,\n                key: wallets[0]?.key\n            }\n            else return {\n                ...state,\n                wallets: [],\n                address: '',\n                key: '',\n                balance: ''\n            }\n        }\n        default: return state\n    }\n}\n\nexport default walletReducer","import {\n  Heading, Stack, Tab, TabList, TabPanel, TabPanels, Tabs\n} from '@chakra-ui/react';\n\nimport React from 'react';\nimport SmartweaveExplorer from './components/Smartweave';\nimport WalletLoader from './components/WalletLoader';\nimport WalletContext, { initWalletState } from './context/walletContext';\nimport walletReducer from './reducers/walletReducer';\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(walletReducer, initWalletState)\n\n  return (\n    <WalletContext.Provider value={{ dispatch, state }}>\n        <Stack w=\"100%\" align=\"center\" >\n          <Heading>ArMob 2.0</Heading>\n          <Tabs isFitted align=\"center\" variant=\"enclosed-colored\">\n            <TabPanels w=\"90vw\">\n              <TabPanel>\n                <WalletLoader />\n              </TabPanel>\n              <TabPanel>\n                <SmartweaveExplorer />\n              </TabPanel>\n            </TabPanels>\n            <TabList position=\"fixed\" bottom=\"0px\" left=\"0px\" w=\"100vw\">\n              <Tab>Wallet</Tab>\n              <Tab isDisabled={state.address === ''}>Tokens</Tab>\n              <Tab isDisabled={state.address === ''}>Transactions</Tab>\n              <Tab isDisabled={state.key === ''}>Smartweave</Tab>\n            </TabList>\n          </Tabs>\n        </Stack>\n    </WalletContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\n\nReactDOM.render(\n  <React.StrictMode>\n          <ChakraProvider theme={theme}>\n    <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n"],"sourceRoot":""}