{"version":3,"sources":["providers/smartweave.ts","providers/wallets.ts","context/walletContext.ts","components/FunctionCall.tsx","components/Smartweave.tsx","components/WalletLoader.tsx","reducers/walletReducer.ts","App.tsx","serviceWorkerRegistration.ts","index.tsx"],"names":["acorn","require","walk","getArweaveInstance","Arweave","init","host","port","getParamNames","node","paramNames","recursive","VariableDeclaration","declarations","object","name","push","property","left","getInputMethods","contractSource","src","parse","ecmaVersion","sourceType","body","declaration","id","allMethods","filter","type","test","readMethods","writeMethods","forEach","returnStatement","consequent","length","argument","properties","key","right","value","params","methodType","param","err","console","log","testFunction","method","contractId","types","a","arweave","newParams","parseInt","parseFloat","interactWriteDryRun","function","res","runFunction","interactWrite","interactRead","addWallet","wallet","address","wallets","jwkToAddress","ar","getBalance","balance","winstonToAr","getTxnData","txId","query","api","post","contractSrcTxn","data","transactions","edges","tags","tag","getData","decode","string","getContractState","getContract","getAllCommunityIds","cursor","hasNextPage","client","ids","i","j","pageInfo","initWalletState","tokens","tokenAddresses","WalletContext","createContext","state","dispatch","FunctionCall","React","useState","values","setValue","setType","useContext","toast","useToast","txnStatus","setStatus","useDisclosure","isOpen","onToggle","submitTransaction","close","title","status","duration","position","allowToggle","map","index","placeholder","onChange","evt","vals","target","newTypes","toString","direction","onClick","then","in","isReadOnly","overflow","height","readOnly","fontSize","defaultValue","JSON","stringify","SmartweaveExplorer","setSource","displayId","setDisplayId","setID","setWriteMethods","setReadMethods","contractState","setContractState","contractIds","setIds","useEffect","getSource","source","methods","flex","textAlign","animateOpacity","size","w","align","WalletLoader","loading","setLoading","setAddress","copiedValue","setCopiedValue","onCopy","useClipboard","onDrop","acceptedFiles","reader","FileReader","onabort","onerror","onload","event","walletObject","result","walletDeets","payload","mnemonic","description","readAsText","loadWalletFromMnemonic","getKeyFromMnemonic","generateWallet","generateMnemonic","createWalletFile","blob","Blob","URL","createObjectURL","href","link","document","createElement","download","appendChild","click","removeChild","switchWallet","isLoaded","borderStyle","borderWidth","mb","getRootProps","getInputProps","flexDirection","padding","isDisabled","mt","isInline","whiteSpace","maxWidth","textOverflow","justifyContent","justify","as","alignContent","walletReducer","action","existingWallets","picture","blockHeight","newWallet","find","App","useReducer","Provider","isFitted","variant","Smartweave","bottom","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","theme","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.c25215cb.chunk.js","sourcesContent":["import Arweave from 'arweave'\nimport { interactWriteDryRun, interactWrite, interactRead, } from 'smartweave'\nimport { JWKInterface } from 'arweave/node/lib/wallet'\nconst acorn = require(\"acorn\");\nconst walk = require('acorn-walk');\n\nexport const getArweaveInstance = () => {\n    return Arweave.init({\n        host: 'arweave.net',\n        port: 443,\n    })\n}\n\nexport interface FunctionCallProps {\n    name: string;\n    params: string[];\n    methodType: string;\n}\n\nconst getParamNames = (node:any):string[] => {\n    let paramNames: string[] = []\n    walk.recursive(node, [], {\n        VariableDeclaration(node: any) {\n            if (node.declarations[0]?.init?.object?.name === \"input\") {\n                paramNames.push(node.declarations[0].init.property.name)\n            }\n            else if (node.declarations[0]?.init?.left?.object?.name === \"input\") {\n                paramNames.push(node.declarations[0].init.left.property.name)\n            }\n        }\n    });\n    return paramNames\n}\nexport const getInputMethods = (\n    contractSource: string\n): {\n    readMethods: FunctionCallProps[];\n    writeMethods: FunctionCallProps[];\n} | undefined => {\n    let src = acorn.parse(contractSource, {\n        ecmaVersion: \"latest\",\n        sourceType: \"module\",\n    });\n    if (src.body[0].declaration.id.name === \"handle\") {\n        let allMethods = src.body[0].declaration.body.body.filter(\n            (node: any) =>\n                node.type === \"IfStatement\" &&\n                node.test.left.object.name === \"input\"\n        );\n        let readMethods: FunctionCallProps[] = [];\n        let writeMethods: FunctionCallProps[] = [];\n        allMethods.forEach((node: any) => {\n            if (\n                node.test.type === \"BinaryExpression\" &&\n                node.test.left.object &&\n                node.test.left.object.name === \"input\"\n            ) {\n\n                try {\n                    let returnStatement =\n                        node.consequent.body[node.consequent.body.length - 1]; //Get write methods\n                    if (\n                        returnStatement.type === \"ReturnStatement\" &&\n                        returnStatement.argument.properties[0].key.name === \"state\"\n                    ) {\n                        let paramNames = getParamNames(node);\n                        let name = node.test.right.value;\n                        writeMethods.push({\n                            name: name,\n                            params: paramNames,\n                            methodType: \"write\",\n                        });\n                    } else {\n                        //Get read methods\n                        let params = node.consequent.body.filter(\n                            (param: any) =>\n                                param.type === \"VariableDeclaration\" &&\n                                ((param.declarations[0].init.left &&\n                                    param.declarations[0].init.left.object &&\n                                    param.declarations[0].init.left.object.name === \"input\") ||\n                                    (param.declarations[0].init.object &&\n                                        param.declarations[0].init.object.name === \"input\"))\n                        );\n                        let paramNames = getParamNames(node);\n                        let name = node.test.right.value;\n                        readMethods.push({\n                            name: name,\n                            params: paramNames,\n                            methodType: \"read\",\n                        });\n                    }\n                } catch (err) {\n                    console.log(err);\n                }\n            }\n        });\n        return { readMethods, writeMethods };\n    }\n    return undefined\n}\n\nexport const testFunction = async (method: string, contractId: string, params: any, key: JWKInterface, types: any): Promise<string> => {\n    let arweave = getArweaveInstance()\n    let newParams = { ...params }\n    for (let param in newParams) {\n        if (types[param] === \"integer\") {\n            newParams[param] = parseInt(params[param])\n        }\n        else if (types[param] === \"float\") {\n            newParams[param] = parseFloat(params[param])\n        }\n    }\n    let res = await interactWriteDryRun(arweave, key, contractId, {\n        ...newParams,\n        function: method\n    })\n    return res.type\n}\n\nexport const runFunction = async (method: string, contractId: string, params: any, key: JWKInterface, types: any, methodType: string): Promise<any> => {\n    let arweave = getArweaveInstance()\n    console.log('params are')\n    console.log(params)\n    console.log('types are')\n    console.log(types)\n    let newParams = { ...params }\n    for (let param in newParams) {\n        if (types[param] === \"integer\") {\n            newParams[param] = parseInt(params[param])\n        }\n        else if (types[param] === \"float\") {\n            newParams[param] = parseFloat(params[param])\n        }\n    }\n    let res: string | false\n    if (methodType === 'write') {\n        res = await interactWrite(arweave, key, contractId, {\n            ...newParams,\n            function: method\n        })\n    }\n    else res = (await interactRead(arweave, key, contractId, {\n        ...newParams,\n        function: method\n    }))\n    console.log(res)\n    return res\n}\n","import Arweave from 'arweave'\nimport axios from 'axios'\nimport { getContract } from 'cacheweave'\n\nexport const getArweaveInstance = () => {\n  return Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n}\n\nexport const addWallet = async (wallet: any): Promise<{ address: string, balance: string }> => {\n  let arweave = getArweaveInstance()\n  let address = ''\n  if (typeof wallet === \"string\") address = wallet;\n  else address = await arweave.wallets.jwkToAddress(wallet)\n  let balance = arweave.ar.winstonToAr(await arweave.wallets.getBalance(address))\n  return { address, balance }\n}\n\nexport interface gQLParams {\n  address?: string,\n  name?: string,\n  value?: string,\n  to?: string,\n  cursor?: string\n}\n\nexport const getFee = async (size: number): Promise<string> => {\n  let res = await axios.get(`https://arweave.net:443/price/${size}`)\n  let arweave = Arweave.init({\n    host: 'arweave.net',\n    port: 443,\n  })\n  return arweave.ar.winstonToAr(res.data)\n}\n\nexport const getTxnData = async (txId: string): Promise<string> => {\n  let arweave = getArweaveInstance()\n  let query = {\n    query: `\n  query {\n    transactions(ids: [\"${txId}\"]) {\n        edges {\n            node {\n                id\n              \ttags {\n                  name\n                  value\n                }\n            }\n        }\n    }\n}`}\n  let res = await arweave.api.post('/graphql', query)\n  let contractSrcTxn = res.data.data.transactions.edges[0].node.tags.filter((tag: any) => tag.name === 'Contract-Src')[0].value\n  let contractSource = await arweave.transactions.getData(contractSrcTxn, { decode: true, string: true }) as string\n  return contractSource;\n}\n\nexport const getContractState = async (contractId: string): Promise<any> => {\n  let arweave = getArweaveInstance()\n  return await getContract(arweave, contractId)\n}\n\nexport const getAllCommunityIds = async (): Promise<string[]> => {\n  let cursor = '';\n  let hasNextPage = true;\n\n  let client = getArweaveInstance()\n\n  const ids: string[] = [];\n  while (hasNextPage) {\n    const query = {\n      query: `\n              query {\n                  transactions(\n                      tags: [\n                          { name: \"App-Name\", values: [\"SmartWeaveContract\"] }\n                          {\n                              name: \"Contract-Src\"\n                              values: [\"ngMml4jmlxu0umpiQCsHgPX2pb_Yz6YDB8f7G6j-tpI\"]\n                          }\n                      ]\n                      after: \"${cursor}\"\n                      first: 100\n                  ) {\n                      pageInfo {\n                          hasNextPage\n                      }\n                      edges {\n                          cursor\n                          node {\n                              id\n                          }\n                      }\n                  }\n              }            \n          `,\n    };\n    const res = await client.api.post('/graphql', query);\n    const data = res.data;\n\n    for (let i = 0, j = data.data.transactions.edges.length; i < j; i++) {\n      ids.push(data.data.transactions.edges[i].node.id);\n    }\n    hasNextPage = data.data.transactions.pageInfo.hasNextPage;\n\n    if (hasNextPage) {\n      cursor = data.data.transactions.edges[data.data.transactions.edges.length - 1].cursor;\n    }\n  }\n\n  return ids;\n}\n\n","import { createContext } from 'react'\n\nexport type token = {\n    ticker: string,\n    contract: string,\n    contractState: any\n}\n\nexport type wallet = {\n    address: string,\n    key?: any,\n    mnemonic?: string\n}\nexport type walletState = {\n    key : any,\n    mnemonic?: string\n    balance: string,\n    address: string,\n    tokens: token[],\n    wallets: wallet[],\n    picture?: string,\n    blockHeight?: number,\n    tokenAddresses?: string[]\n}\n\nexport const initWalletState: walletState = {\n        key: null as any,\n        balance: '',\n        address: '',\n        tokens: [],\n        tokenAddresses: [],\n        wallets: []\n}\n\nconst WalletContext = createContext<{state:walletState, dispatch: React.Dispatch<any>}>({state: initWalletState, dispatch: () => null} )\n\nexport { WalletContext as default }","import {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Button,\n  Code,\n  Collapse,\n  HStack,\n  Input,\n  Radio,\n  RadioGroup,\n  Spinner,\n  Text,\n  Textarea,\n  useDisclosure,\n  useToast,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport WalletContext from \"../context/walletContext\";\nimport { runFunction, testFunction } from \"../providers/smartweave\";\n\nexport interface FunctionCallComponentProps {\n  name: string;\n  params: string[];\n  methodType: string;\n  contractId: string;\n}\n\nconst FunctionCall: React.FC<FunctionCallComponentProps> = ({\n  name,\n  params,\n  methodType,\n  contractId,\n}) => {\n  const [values, setValue] = React.useState({} as any);\n  const [types, setType] = React.useState({} as any);\n  const { state } = React.useContext(WalletContext);\n  const toast = useToast();\n  const [txnStatus, setStatus] = React.useState() as any;\n  const { isOpen, onToggle } = useDisclosure();\n\n  const submitTransaction = async (close: () => void) => {\n    let res = await runFunction(\n      name,\n      contractId,\n      values,\n      state.key,\n      types,\n      methodType\n    );\n    if (res)\n      toast({\n        title: \"Successfully submitted transaction!\",\n        status: \"success\",\n        duration: 3000,\n        position: \"bottom\",\n      });\n    else\n      toast({\n        title: \"Error submitting transaction\",\n        status: \"error\",\n        duration: 3000,\n        position: \"bottom\",\n      });\n    close();\n    setStatus();\n  };\n\n  return (\n    <Accordion allowToggle>\n      <AccordionItem key={name}>\n        <AccordionButton>\n          <Text>{name}</Text>\n          <AccordionIcon />\n        </AccordionButton>\n        <AccordionPanel>\n          {params.map((param, index) => {\n            return (\n              <Box>\n                <Input\n                  key={name + param}\n                  placeholder={param}\n                  value={values[index]}\n                  onChange={(evt) => {\n                    let vals = { ...values };\n                    vals[param] = evt.target.value;\n                    setValue(vals);\n                  }}\n                />\n                <RadioGroup\n                  name=\"param-type\"\n                  onChange={(evt) => {\n                    let newTypes = { ...types };\n                    newTypes[param] = evt.toString();\n                    setType(newTypes);\n                  }}\n                  value={types[param]}\n                  direction=\"horizontal\"\n                >\n                  <Radio value=\"string\">String</Radio>\n                  <Radio value=\"integer\">Integer</Radio>\n                  <Radio value=\"float\">Float</Radio>\n                </RadioGroup>\n              </Box>\n            );\n          })}\n          {methodType === \"write\" ? (\n            <>\n              {!isOpen && !txnStatus && (\n                <Button\n                  onClick={() => {\n                    onToggle();\n                    testFunction(\n                      name,\n                      contractId,\n                      values,\n                      state.key,\n                      types\n                    ).then((res) => setStatus(res));\n                  }}\n                >\n                  Test Contract Method Call\n                </Button>\n              )}\n            </>\n          ) : (\n            <>\n              {!isOpen ? (\n                <Button\n                  onClick={() => {\n                    onToggle();\n                    runFunction(\n                      name,\n                      contractId,\n                      values,\n                      state.key,\n                      types,\n                      methodType\n                    ).then((res) => setStatus(res));\n                  }}\n                >\n                  Read Contract\n                </Button>\n              ) : (\n                <Button\n                  onClick={() => {\n                    onToggle();\n                    setStatus();\n                  }}\n                >\n                  Start Over\n                </Button>\n              )}\n            </>\n          )}\n          <Collapse in={isOpen}>\n            {methodType === \"write\" ? (\n              <VStack>\n                {txnStatus ? (\n                  <Text>Transaction status is {txnStatus}</Text>\n                ) : (\n                  <Spinner />\n                )}\n                <HStack>\n                  <Button onClick={() => submitTransaction(onToggle)}>\n                    Live dangerously!\n                  </Button>\n                  <Button\n                    onClick={() => {\n                      onToggle();\n                      setStatus();\n                    }}\n                  >\n                    Start Over\n                  </Button>\n                </HStack>\n              </VStack>\n            ) : (\n              <Code>\n                <Text>Method Result</Text>\n                {txnStatus ? (\n                  <Textarea\n                    isReadOnly\n                    overflow=\"scroll\"\n                    height=\"200px\"\n                    readOnly={true}\n                    fontSize=\"xs\"\n                    defaultValue={JSON.stringify(txnStatus, null, 2)}\n                  />\n                ) : (\n                  <Spinner />\n                )}\n              </Code>\n            )}\n          </Collapse>\n        </AccordionPanel>\n      </AccordionItem>\n    </Accordion>\n  );\n};\n\nexport default FunctionCall;\n","import {\n  Accordion,\n  AccordionButton,\n  AccordionIcon,\n  AccordionItem,\n  AccordionPanel,\n  Box,\n  Button,\n  Code,\n  Collapse,\n  Heading,\n  Input,\n  List,\n  ListItem,\n  Textarea,\n  useDisclosure,\n  VStack,\n} from \"@chakra-ui/react\";\nimport React from \"react\";\nimport { FunctionCallProps, getInputMethods } from \"../providers/smartweave\";\nimport {\n  getAllCommunityIds,\n  getContractState,\n  getTxnData,\n} from \"../providers/wallets\";\nimport FunctionCall from \"./FunctionCall\";\n\nconst SmartweaveExplorer = () => {\n  const { isOpen, onToggle } = useDisclosure()\n\n  const [contractSource, setSource] = React.useState(\"\");\n  const [displayId, setDisplayId] = React.useState('')\n  const [contractId, setID] = React.useState(\"\");\n  const [writeMethods, setWriteMethods] = React.useState(\n    [] as FunctionCallProps[]\n  );\n  const [readMethods, setReadMethods] = React.useState(\n    [] as FunctionCallProps[]\n  );\n  const [contractState, setContractState] = React.useState({} as any);\n  const [contractIds, setIds] = React.useState<string[]>([]);\n\n  React.useEffect(() => {\n    getAllCommunityIds().then((ids) => setIds(ids));\n  }, []);\n\n  React.useEffect(() => {\n    if (contractId){\n      getSource();\n    }\n  }, [contractId]);\n\n  const getSource = async () => {\n    if (!contractId) {\n      console.log('no contract ID!')\n      return;\n    }\n    let source = await getTxnData(contractId);\n    setSource(source);\n    let methods = await getInputMethods(source);\n    if (methods?.writeMethods) setWriteMethods(methods.writeMethods);\n    if (methods?.readMethods) setReadMethods(methods.readMethods);\n    let res = await getContractState(contractId);\n    setContractState(res);\n  };\n\n  return (\n    <VStack>\n\n      <Button onClick={onToggle}>\n          <Box flex=\"1\" textAlign=\"left\">\n         PSC Contract Addresses\n        </Box>\n        </Button>\n        <Collapse in={isOpen} animateOpacity>  \n        <List>\n          {contractIds.map((id) => {\n            return (\n              <ListItem\n                onClick={() => {\n                  setID(id);\n                  setDisplayId(id);\n                  onToggle();\n                }}\n                cursor=\"pointer\"\n              >\n                {id}\n              </ListItem>\n            );\n          })}\n        </List>\n        </Collapse>\n      <Input\n        placeholder=\"Smartweave Contract ID\"\n        value={displayId}\n        onChange={(evt) => setDisplayId(evt.target.value)}\n      />\n      <Button onClick={() => setID(displayId)}>Load Contract</Button>\n      <Heading size=\"xs\">Contract Source</Heading>\n      <Code w=\"100%\">\n        <Textarea\n          overflow=\"scroll\"\n          height=\"200px\"\n          readOnly={true}\n          fontSize=\"xs\"\n          isReadOnly\n          defaultValue={contractSource}\n        />\n      </Code>\n      <Heading size=\"xs\">Contract State</Heading>\n      <Code\n        w=\"100%\"\n        overflow=\"scroll\"\n        height=\"200px\"\n        fontSize=\"xs\"\n        align=\"start\"\n      >\n        {JSON.stringify(contractState, null, 2)}\n      </Code>\n\n      <Heading size=\"xs\">Write Methods</Heading>\n      <List>\n        {writeMethods &&\n          writeMethods.map((method: FunctionCallProps) => (\n            <ListItem>\n              <FunctionCall\n                name={method.name}\n                params={method.params}\n                methodType={method.methodType}\n                contractId={contractId}\n              />\n            </ListItem>\n          ))}\n      </List>\n      <Heading size=\"xs\">Read Methods</Heading>\n      <List>\n        {readMethods &&\n          readMethods.map((method: FunctionCallProps) => (\n            <ListItem>\n              <FunctionCall\n                name={method.name}\n                params={method.params}\n                methodType={method.methodType}\n                contractId={contractId}\n              />\n            </ListItem>\n          ))}\n      </List>\n    </VStack>\n  );\n};\n\nexport default SmartweaveExplorer;\n","import {\n  Box,\n  Button,\n  Divider,\n  Flex,\n  Heading,\n  Input,\n  Popover,\n  PopoverArrow,\n  PopoverBody,\n  PopoverContent,\n  PopoverTrigger,\n  Skeleton,\n  Stack,\n  Text,\n  useClipboard,\n  useToast,\n} from \"@chakra-ui/react\";\nimport { generateMnemonic, getKeyFromMnemonic } from \"arweave-mnemonic-keys\";\nimport React from \"react\";\nimport Dropzone from \"react-dropzone\";\nimport { FaCheck, FaGripHorizontal, FaKey, FaTrash } from \"react-icons/fa\";\nimport WalletContext, { wallet } from \"../context/walletContext\";\nimport { addWallet } from \"../providers/wallets\";\n\nconst WalletLoader = () => {\n  const toast = useToast();\n  const { state, dispatch } = React.useContext(WalletContext);\n  const [loading, setLoading] = React.useState(false);\n  const [address, setAddress] = React.useState(\"\");\n  const [copiedValue, setCopiedValue] = React.useState<string>(\"\");\n  const { onCopy } = useClipboard(copiedValue);\n\n  const onDrop = async (acceptedFiles: any) => {\n    const reader = new FileReader();\n    reader.onabort = () => console.log(\"file reading was aborted\");\n    reader.onerror = () => console.log(\"file reading has failed\");\n    reader.onload = async function (event) {\n      setLoading(true);\n      if (acceptedFiles[0].type === \"application/json\") {\n        try {\n          let walletObject = JSON.parse(event!.target!.result as string);\n          let walletDeets = await addWallet(walletObject);\n\n          dispatch({\n            type: \"ADD_WALLET\",\n            payload: { ...walletDeets, key: walletObject, mnemonic: walletObject.mnemonic },\n          });\n\n        } catch (err) {\n          console.log(\"Invalid json in wallet file\");\n          toast({\n            title: \"Error loading wallet\",\n            status: \"error\",\n            duration: 3000,\n            position: \"bottom-left\",\n            description: \"Invalid JSON in wallet file\",\n          });\n        }\n      } else {\n        console.log(\"Invalid file type\");\n        toast({\n          title: \"Error loading wallet\",\n          status: \"error\",\n          duration: 3000,\n          position: \"bottom-left\",\n          description: \"Invalid file type\",\n        });\n      }\n      setLoading(false);\n    };\n    try {\n      reader.readAsText(acceptedFiles[0]);\n    } catch (err) {\n      console.log(\"Invalid file type\");\n      toast({\n        title: \"Error loading wallet\",\n        status: \"error\",\n        duration: 3000,\n        position: \"bottom-left\",\n        description: \"Invalid file type\",\n      });\n    }\n  };\n\n  const loadWalletFromMnemonic = async (mnemonic: string) => {\n    setLoading(true);\n    let walletObject = await getKeyFromMnemonic(mnemonic);\n    let walletDeets = await addWallet(walletObject);\n\n    setLoading(false);\n    dispatch({\n      type: \"ADD_WALLET\",\n      payload: { ...walletDeets, key: walletObject, mnemonic: mnemonic },\n    });\n\n  };\n\n  const generateWallet = async () => {\n    setLoading(true);\n    let mnemonic = await generateMnemonic();\n    setAddress(mnemonic);\n    loadWalletFromMnemonic(mnemonic);\n  };\n\n\n  const createWalletFile = async (wallet: wallet) => {\n    const blob = new Blob([JSON.stringify({...wallet.key, mnemonic: wallet.mnemonic}, null, 2)], {\n      type: \"application/json\",\n    });\n    const href = await URL.createObjectURL(blob);\n    const link = document.createElement(\"a\");\n    link.href = href;\n    link.download = `arweave-keyfile-${wallet.address}.json`;\n    document.body.appendChild(link);\n    link.click();\n    document.body.removeChild(link);\n  };\n\n  const switchWallet = async (address: string) => {\n    let wallet = await addWallet(address);\n    dispatch({\n      type: \"CHANGE_ACTIVE_WALLET\",\n      payload: { address: wallet.address, balance: wallet.balance },\n    });\n  };\n\n  return (\n    <Stack align=\"center\">\n      <Skeleton isLoaded={!loading}>\n        <Box w=\"100%\" borderStyle=\"dashed\" borderWidth=\"2px\" mb={2}>\n          <Dropzone onDrop={onDrop}>\n            {({ getRootProps, getInputProps }) => (\n              <section>\n                <div {...getRootProps()}>\n                  <input {...getInputProps()} />\n                  <Box flexDirection=\"row\" padding={3}>\n                    <Text fontSize={14} textAlign=\"center\">\n                      Drop a wallet file or click to load wallet\n                    </Text>\n                  </Box>\n                </div>\n              </section>\n            )}\n          </Dropzone>\n        </Box>\n        <Stack w=\"100%\" mb={2}>\n          <Heading size=\"xs\">Wallet mnemonic</Heading>\n          <Input\n            w=\"93%%\"\n            placeholder=\"Enter 12 word seedphrase\"\n            onChange={(evt: React.ChangeEvent<HTMLInputElement>) => {\n              setAddress(evt.target.value);\n            }}\n          />\n          <Button\n            isDisabled={address === \"\"}\n            onClick={() => loadWalletFromMnemonic(address)}\n          >\n            Load Wallet\n          </Button>\n        </Stack>\n        <Stack w=\"100%\">\n          <Button mt={2} onClick={generateWallet}>\n            Generate New Wallet\n          </Button>\n        </Stack>\n      </Skeleton>\n      {state.address && (\n        <>\n          <Divider />\n          <Heading size=\"sm\">Loaded Wallets</Heading>\n        </>\n      )}\n      {state.wallets.length > 0 &&\n        state.wallets.map((wallet) => {\n          console.log(wallet);\n          return (\n            <Stack isInline align=\"start\">\n              <Popover>\n                <PopoverTrigger>\n                  <Text\n                    whiteSpace=\"nowrap\"\n                    overflow=\"hidden\"\n                    maxWidth=\"90vw\"\n                    textOverflow=\"ellipsis\"\n                    cursor=\"pointer\"\n                  >\n                    {wallet.address}\n                  </Text>\n                </PopoverTrigger>\n                <PopoverContent>\n                  <PopoverArrow />\n                  <PopoverBody>\n                    <Stack isInline justifyContent=\"space-around\">\n                      <Flex\n                        direction=\"column\"\n                        align=\"center\"\n                        justify=\"center\"\n                        key={wallet.address + \"pseudo2\"}\n                        as=\"button\"\n                        onClick={() => {\n                          switchWallet(wallet.address);\n                        }}\n                        alignContent=\"start\"\n                      >\n                        <FaCheck size={16} />\n                        <Text>Use</Text>\n                      </Flex>\n                      <Flex\n                        as=\"button\"\n                        direction=\"column\"\n                        align=\"center\"\n                        justify=\"center\"\n                        onClick={() => {\n                          dispatch({\n                            type: \"REMOVE_WALLET\",\n                            payload: { address: wallet.address },\n                          });\n                        }}\n                      >\n                        <FaTrash size={16} />\n                        <Text>Remove</Text>\n                      </Flex>\n                      <Flex\n                        as=\"button\"\n                        direction=\"column\"\n                        align=\"center\"\n                        justify=\"center\"\n                        onClick={() => createWalletFile(wallet)}\n                      >\n                        <FaKey size={16} />\n                        <Text>Download Keyfile</Text>\n                      </Flex>\n                      {wallet.mnemonic && (\n                        <Flex\n                          as=\"button\"\n                          direction=\"column\"\n                          align=\"center\"\n                          justify=\"center\"\n                          onClick={() => {\n                            if (wallet.mnemonic)\n                              setCopiedValue(wallet.mnemonic);\n                            onCopy();\n                          }}\n                        >\n                          <FaGripHorizontal size={16} />\n                          <Text>Copy Seedphrase</Text>\n                        </Flex>\n                      )}\n                    </Stack>\n                  </PopoverBody>\n                </PopoverContent>\n              </Popover>\n            </Stack>\n          );\n        })}\n    </Stack>\n  );\n};\n\nexport default WalletLoader;\n","import { walletState, wallet } from '../context/walletContext';\n\nconst walletReducer = (state: walletState, action: { type: string, payload: any }): walletState => {\n    console.log('Current state is:')\n    console.log(state)\n    console.log('Action requested is:')\n    console.log(action)\n    switch (action.type) {\n        case 'LOAD_STATE': {\n            return { ...action.payload.state }\n        }\n        case 'ADD_WALLET': {\n            let existingWallets = state.wallets?.filter((wallet: wallet)=> wallet.address === action.payload.address)\n            let wallets = state.wallets ? state.wallets : []\n            if (existingWallets && existingWallets.length === 0)\n                wallets?.push({address:action.payload.address, key:action.payload.key, mnemonic: action.payload.mnemonic})\n            return {\n            ...state,\n            key: action.payload.key,\n            balance: action.payload.balance,\n            address: action.payload.address,\n            mnemonic: action.payload.mnemonic,\n            wallets: wallets\n        }}\n        case 'UPDATE_TOKENS': {\n            return {\n                ...state,\n                tokens: action.payload.tokens\n            }\n        }\n        case 'SET_PICTURE': {\n            return {\n                ...state,\n                picture: action.payload.picture\n            }\n        }\n        case 'SET_BLOCK_HEIGHT': {\n            return {\n                ...state,\n                blockHeight: action.payload.blockHeight\n            }\n        }\n        case 'SET_TOKEN_ADDRESSES': {\n            return {\n                ...state,\n                tokenAddresses: action.payload.tokenAddresses\n            }\n        }\n        case 'CHANGE_ACTIVE_WALLET': {\n            let newWallet = state.wallets.find((wallet) => wallet.address === action.payload.address)\n            return {\n                ...state,\n                address: action.payload.address,\n                key: newWallet?.key,\n                balance: action.payload.balance,\n                mnemonic: newWallet?.mnemonic\n            }\n        }\n        case 'REMOVE_WALLET': {\n            let wallets = state.wallets.filter((wallet) => wallet.address !== action.payload.address)\n            if (wallets.length > 0)\n            return {\n                ...state,\n                wallets: wallets,\n                address: wallets[0]?.address,\n                key: wallets[0]?.key\n            }\n            else return {\n                ...state,\n                wallets: [],\n                address: '',\n                key: '',\n                balance: ''\n            }\n        }\n        default: return state\n    }\n}\n\nexport default walletReducer","import {\n  Heading, Stack, Tab, TabList, TabPanel, TabPanels, Tabs\n} from '@chakra-ui/react';\n\nimport React from 'react';\nimport SmartweaveExplorer from './components/Smartweave';\nimport WalletLoader from './components/WalletLoader';\nimport WalletContext, { initWalletState } from './context/walletContext';\nimport walletReducer from './reducers/walletReducer';\n\nfunction App() {\n  const [state, dispatch] = React.useReducer(walletReducer, initWalletState)\n\n  return (\n    <WalletContext.Provider value={{ dispatch, state }}>\n        <Stack w=\"100%\" align=\"center\" >\n          <Heading>Smartweave Explorer</Heading>\n          <Tabs isFitted align=\"center\" variant=\"enclosed-colored\">\n            <TabPanels w=\"100vw\">\n              <TabPanel>\n                <WalletLoader />\n              </TabPanel>\n              <TabPanel>\n                <SmartweaveExplorer />\n              </TabPanel>\n            </TabPanels>\n            <TabList position=\"fixed\" bottom=\"0px\" left=\"0px\" w=\"100vw\">\n              <Tab>Wallet</Tab>\n              <Tab isDisabled={state.key === ''}>Smartweave</Tab>\n            </TabList>\n          </Tabs>\n        </Stack>\n    </WalletContext.Provider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://cra.link/PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://cra.link/PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://cra.link/PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log('No internet connection found. App is running in offline mode.');\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\nimport { ChakraProvider, theme } from '@chakra-ui/react';\n\nReactDOM.render(\n  <React.StrictMode>\n          <ChakraProvider theme={theme}>\n    <App />\n    </ChakraProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://cra.link/PWA\nserviceWorkerRegistration.unregister();\n\n"],"sourceRoot":""}